// References:
// https://developer.valvesoftware.com/wiki/VTF_(Valve_Texture_Format)#File_format

namespace VTF {
    const MAGIC_LE = 0x00465456; // 'VTF0'

    export type Type = {
        header: Types.Header;
    };

    export const Parser = (buffer: ArrayBuffer): Type => {
        const data = new DataView(buffer, 0, 80);
        const header: Types.Header = {
            identifier: data.getInt32(0, true),
            version: [data.getUint32(4, true), data.getUint32(8, true)],
            size: data.getUint32(12, true),
            width: data.getUint16(16, true),
            height: data.getUint16(18, true),
            flags: data.getUint32(20, true),
            frame_length: data.getUint16(24, true),
            frame_start: data.getUint16(26, true),
            // 28: += 4 bytes (padding0)
            reflectivity: [
                data.getFloat32(32, true),
                data.getFloat32(36, true),
                data.getFloat32(40, true),
            ],
            // 44: += 4 bytes (padding1)
            bumpmap_scale: data.getFloat32(48, true),
            image_format_hi: data.getUint32(52, true),
            mipmap_count: data.getUint8(56),
            image_format_lo: data.getUint32(57, true),
            image_width_lo: data.getUint8(61),
            image_height_lo: data.getUint8(62),
            //
            // v7.2+
            // depth: data.getUint16(63, true),
            // 65: += 3 bytes (padding2)
            //
            // v7.3+
            // resources_length: data.getUint32(68, true),
            // 72: += 8 bytes (padding3)
        };
        const major = header.version[0];
        const minor = header.version[1];
        if (major === 7) {
            if (minor >= 2) header.depth = data.getUint16(63, true);
            if (minor >= 3) header.resources_length = data.getUint32(68, true);
        }
        return { header };
    };

    // Data Types
    //
    //
    export namespace Types {
        export type Header = {
            identifier: number; // File signature ("VTF\0"). (or as little-endian integer, 0x00465456)
            version: number[]; // version[0].version[1] (currently 7.2).
            size: number; // Size of the header struct  (16 byte aligned; currently 80 bytes) + size of the resources dictionary (7.3+).
            width: number; // Width of the largest mipmap in pixels. Must be a power of 2.
            height: number; // Height of the largest mipmap in pixels. Must be a power of 2.
            flags: TEXTURE_FLAG; // VTF flags.
            frame_length: number; // Number of frames, if animated (1 for no animation).
            frame_start: number; // First frame in animation (0 based). Can be -1 in environment maps older than 7.5, meaning there are 7 faces, not 6.
            reflectivity: number[]; // reflectivity vector.
            bumpmap_scale: number; // Bumpmap scale.
            image_format_hi: IMAGE_FORMAT; // High resolution image format.
            mipmap_count: number;
            image_format_lo: IMAGE_FORMAT; // Low resolution image format (always DXT1).
            image_width_lo: number;
            image_height_lo: number;
            // 7.2+
            depth?: number; // Depth of the largest mipmap in pixels. Must be a power of 2. Is 1 for a 2D texture.
            // 7.3+
            resources_length?: number; // Number of resources this vtf has. The max appears to be 32.
        };
    }

    // Enums
    //
    //
    export enum IMAGE_FORMAT {
        NONE = -1,
        RGBA8888,
        ABGR8888,
        RGB888,
        BGR888,
        RGB565,
        I8,
        IA88,
        P8,
        A8,
        RGB888_BLUESCREEN,
        BGR888_BLUESCREEN,
        ARGB8888,
        BGRA8888,
        DXT1,
        DXT3,
        DXT5,
        BGRX8888,
        BGR565,
        BGRX5551,
        BGRA4444,
        DXT1_ONEBITALPHA,
        BGRA5551,
        UV88,
        UVWQ8888,
        RGBA16161616F,
        RGBA16161616,
        UVLX8888,
    }
    export enum TEXTURE_FLAG {
        POINTSAMPLE = 0x00000001,
        TRILINEAR = 0x00000002,
        CLAMPS = 0x00000004,
        CLAMPT = 0x00000008,
        ANISOTROPIC = 0x00000010,
        HINT_DXT5 = 0x00000020,
        PWL_CORRECTED = 0x00000040,
        NORMAL = 0x00000080,
        NOMIP = 0x00000100,
        NOLOD = 0x00000200,
        ALL_MIPS = 0x00000400,
        PROCEDURAL = 0x00000800,
        // These are automatically generated by vtex from the texture data.
        ONEBITALPHA = 0x00001000,
        EIGHTBITALPHA = 0x00002000,
        // Newer flags from the *.txt config file
        ENVMAP = 0x00004000,
        RENDERTARGET = 0x00008000,
        DEPTHRENDERTARGET = 0x00010000,
        NODEBUGOVERRIDE = 0x00020000,
        SINGLECOPY = 0x00040000,
        PRE_SRGB = 0x00080000,
        UNUSED_00100000 = 0x00100000,
        UNUSED_00200000 = 0x00200000,
        UNUSED_00400000 = 0x00400000,
        NODEPTHBUFFER = 0x00800000,
        UNUSED_01000000 = 0x01000000,
        CLAMPU = 0x02000000,
        VERTEXTEXTURE = 0x04000000,
        SSBUMP = 0x08000000,
        UNUSED_10000000 = 0x10000000,
        BORDER = 0x20000000,
        UNUSED_40000000 = 0x40000000,
        UNUSED_80000000 = 0x80000000,
    }
}

export default VTF;
